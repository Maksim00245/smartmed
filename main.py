import asyncio
import pathlib
from collections import defaultdict
from aiogram.types import FSInputFile

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.client.bot import DefaultBotProperties
from g4f.client import Client

TOKEN = "7805689486:AAGg-Ru0p653_9qd_mHyq7Ku0iR7FFwqAME"
GROUP_ID = -1002658300534  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = Client()

users = {}  # user_id -> –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ —à–∞–≥–∏
patients = {}  # id_code -> user_id
history = defaultdict(list)  # user_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç –∏–ª–∏ file_id)

back_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)


async def gpt_recommend_specialist(symptoms: str) -> str:
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª –∂–∞–ª–æ–±—ã: '{symptoms}'. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Ç–æ–º, –∫–∞–∫–∏–µ –≤—Ä–∞—á–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã. "
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–í–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞... –í–∞–º —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å...'. "
        "–û–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏ –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å, —á—Ç–æ–±—ã –ø–∞—Ü–∏–µ–Ω—Ç –ø–æ–Ω–∏–º–∞–ª –ª–æ–≥–∏–∫—É."
    )
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            web_search=False
        )
        return response.choices[0].message.content.strip()
    except Exception:
        return "–í–∞—à–∏ —Å–∏–º–ø—Ç–æ–º—ã —Ç—Ä–µ–±—É—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è."


@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    uid = message.from_user.id
    if uid in users:
        users.pop(uid)
    await cmd_start(message)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å")],
        ],
        resize_keyboard=True
    )

    BASE_DIR = pathlib.Path(__file__).parent
    photo_path = FSInputFile(BASE_DIR / "smartmed.png")

    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É –≤—Ä–∞—á—É, "
        "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üîπ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get.\n\n"
        "<b>–í–∞–∂–Ω–æ:</b> –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å</b>, –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "
        "–≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º.\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> "
        "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! ‚ù§Ô∏è"
    )

    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo_path,
        caption=text,
        parse_mode=ParseMode.HTML,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML, —Ç.–∫. –≤ —Ç–µ–∫—Å—Ç–µ <b>—Ç–µ–≥–∏</b>
        reply_markup=keyboard
    )


@dp.message(Command("get"))
@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def cmd_get(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return
    users[message.from_user.id] = {
        "step": "fio",
        "id": message.from_user.id,
        "first_name": message.from_user.first_name or ""
    }
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:</b>",
        reply_markup=back_keyboard
    )


@dp.message()
async def process_steps(message: types.Message):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –∏–ª–∏ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ
    if message.chat.type != "private" and message.chat.id != GROUP_ID:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send –≤ –≥—Ä—É–ø–ø–µ
    if message.text and message.text.startswith("/send"):
        await handle_send(message)
        return

    # –î–∞–ª–µ–µ –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.chat.type != "private":
        return

    uid = message.from_user.id
    text = message.text.strip()

    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        users.pop(uid, None)
        await cmd_start(message)
        return

    if uid not in users:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
    if text == "üîô –ù–∞–∑–∞–¥":
        current_step = users[uid].get("step")
        step_order = ["fio", "age", "phone", "symptoms"]
        if current_step in step_order:
            idx = step_order.index(current_step)
            if idx > 0:
                prev_step = step_order[idx - 1]
                users[uid]["step"] = prev_step
                prompts = {
                    "fio": "üìù <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:</b>",
                    "age": "üéÇ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):</b>",
                    "phone": "üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>",
                    "symptoms": "ü©∫ <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∂–∞–ª–æ–±—ã (–≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ):</b>"
                }
                await message.answer(prompts[prev_step], reply_markup=back_keyboard)
            else:
                await message.answer("–í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.", reply_markup=back_keyboard)
        return

    step = users[uid].get("step")

    if step == "fio":
        users[uid]["fio"] = text
        users[uid]["step"] = "age"
        await message.answer("üéÇ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º):</b>", reply_markup=back_keyboard)
    elif step == "age":
        if not text.isdigit() or not (0 < int(text) < 120):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 119.", reply_markup=back_keyboard)
            return
        users[uid]["age"] = text
        users[uid]["step"] = "phone"
        await message.answer("üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>", reply_markup=back_keyboard)
    elif step == "phone":
        if len(text) < 5 or not any(c.isdigit() for c in text):
            await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=back_keyboard)
            return
        users[uid]["phone"] = text
        users[uid]["step"] = "symptoms"
        await message.answer("ü©∫ <b>–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∂–∞–ª–æ–±—ã (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ):</b>", reply_markup=back_keyboard)
    elif step == "symptoms":
        users[uid]["symptoms"] = text
        await message.answer("‚è≥ –ò—â—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=ReplyKeyboardRemove())

        spec = await gpt_recommend_specialist(text)
        users[uid]["spec"] = spec
        users[uid]["username"] = message.from_user.username or ""

        code = str(uid)
        users[uid]["id_code"] = code
        patients[code] = uid

        users[uid]["step"] = "confirm"

        await message.answer(
            f"üß† <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>\n{spec}\n\n"
            f"üìå –í–∞—à –∫–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞ (Telegram ID): <b>{code}</b>\n\n"
            f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É</b>, —á—Ç–æ–±—ã –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n"
            f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π <b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É")],
                    [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True,
            )
        )
    elif step == "confirm":
        if text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É":
            data = users[uid]
            text_msg = (
                f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π –ø–∞—Ü–∏–µ–Ω—Ç:</b>\n"
                f"üÜî –ö–æ–¥ (Telegram ID): <b>{data['id_code']}</b>\n"
                f"üë§ {data['fio']} ({data['age']} –ª–µ—Ç)\n"
                f"üìû {data['phone']}\n"
                f"üí¨ –ñ–∞–ª–æ–±—ã: {data['symptoms']}\n"
                f"üß† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {data['spec']}\n"
            )

            if data.get('username'):
                text_msg += f"üìé Telegram: <a href='https://t.me/{data['username']}'>{data['first_name']}</a>"
            else:
                text_msg += f"üìé Telegram: <a href='tg://user?id={data['id']}'>{data['first_name']}</a>"

            reply_markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—É", callback_data=f"reply_{data['id_code']}")]
                ]
            )
            await bot.send_message(chat_id=GROUP_ID, text=text_msg, reply_markup=reply_markup)
            await message.answer(
                f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä–∞—á—É.\n"
                f"üìå –í–∞—à –∫–æ–¥ –¥–ª—è —Å–≤—è–∑–∏: <b>{data['id_code']}</b>\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.",
                reply_markup=ReplyKeyboardRemove()
            )
            users[uid]["step"] = "waiting_direction"
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É</b> –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–∞—á—É")],
                        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True,
                )
            )
    else:
        await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞—á–∞—Ç—å</b> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /get.")


@dp.message(Command("history"))
async def send_history(message: types.Message):
    if message.chat.type != "private":
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    uid = message.from_user.id
    docs = history.get(uid, [])

    if not docs:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π.")
        return

    await message.answer(f"üìö –í–∞—à–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ({len(docs)}):")
    for item in docs:
        if item['type'] == 'text':
            await message.answer(f"üìÑ –¢–µ–∫—Å—Ç: {item['content']}")
        elif item['type'] == 'photo':
            await message.answer_photo(item['file_id'], caption=item.get('caption', ''))
        elif item['type'] == 'document':
            await message.answer_document(item['file_id'], caption=item.get('caption', ''))


@dp.message(Command("send"))
async def handle_send(message: types.Message):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ
    if message.chat.id != GROUP_ID:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.text and message.text.startswith("/send"):
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <–∫–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        code, msg = args[1], args[2]
        if code not in patients:
            await message.reply("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        uid = patients[code]
        try:
            await bot.send_message(uid, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤—Ä–∞—á–∞:\n{msg}")
            history[uid].append({'type': 'text', 'content': msg})
            await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–ø–∏—Å—å—é /send
    elif message.caption and message.caption.startswith("/send"):
        args = message.caption.split(maxsplit=2)
        if len(args) < 3:
            await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send <–∫–æ–¥ –ø–∞—Ü–∏–µ–Ω—Ç–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
            return

        code, description = args[1], args[2]
        if code not in patients:
            await message.reply("‚ùå –ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        uid = patients[code]
        try:
            if message.photo:
                file_id = message.photo[-1].file_id
                await bot.send_photo(uid, file_id, caption=f"üì∑ –û—Ç –≤—Ä–∞—á–∞:\n{description}")
                history[uid].append({'type': 'photo', 'file_id': file_id, 'caption': description})
            elif message.document:
                file_id = message.document.file_id
                await bot.send_document(uid, file_id, caption=f"üìÑ –û—Ç –≤—Ä–∞—á–∞:\n{description}")
                history[uid].append({'type': 'document', 'file_id': file_id, 'caption': description})

            await message.reply("‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–∞—Ü–∏–µ–Ω—Ç—É.")
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


@dp.callback_query(lambda c: c.data and c.data.startswith("reply_"))
async def handle_reply_callback(callback: CallbackQuery):
    code = callback.data.split("_", maxsplit=1)[1]
    if code not in patients:
        await callback.answer("–ü–∞—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.answer(
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç—É:\n"
        f"1. –¢–µ–∫—Å—Ç: `/send {code} –≤–∞—à —Ç–µ–∫—Å—Ç`\n"
        f"2. –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode="Markdown"
    )
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())